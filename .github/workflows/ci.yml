# @prettier
name: ci

on: [push, pull_request]

jobs:
  build:
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.9' ]
        django-version: [ '2.2' ]
        channels-version: [ '3.0.3' ]
        asgiref-version: [ '3.2.10' ]
        # python-version: [ '3.9' ]
        # django-version: [ '2.2', '3.1', '3.2', '4.0' ]
        # channels-version: [ '3.0.3' ]
        # asgiref-version: [ '3.2.10', '3.3.4', '3.4.1' ]

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}-python-${{ matrix.python-version }}-django-${{ matrix.django-version}}-channels-${{ matrix.channels-version }}-asgiref-${{ matrix.asgiref-version }}

    outputs:
      REGISTRY: ${{ steps.docker-info.outputs.REGISTRY }}
      IMAGE_NAME: ${{ steps.docker-info.outputs.IMAGE_NAME }}

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

    - name: Set image name as output
      id: docker-info
      shell: bash
      run: |
        echo ::set-output name=IMAGE_NAME::${IMAGE_NAME}
        echo ::set-output name=REGISTRY::${REGISTRY}
      env:
        IMAGE_NAME: ${{ env.IMAGE_NAME }}
        REGISTRY: ${{ env.REGISTRY }}

    # - name: Install poetry
    #   run: |
    #     curl -O -sSL https://install.python-poetry.org/install-poetry.py
    #     python install-poetry.py -y --version 1.1.12
    #     echo "PATH=${HOME}/.poetry/bin:${PATH}" >> $GITHUB_ENV
    #     rm install-poetry.py

    # - name: Add ~/.local/bin to PATH
    #   run: echo "$HOME/.local/bin" >> $GITHUB_PATH
    #
    # - name: Get poetry cache paths from config
    #   run: |
    #     echo "poetry_cache_dir=$(poetry config --list | sed -n 's/.*cache-dir = //p' | sed -e 's/^\"//' -e 's/\"$//')" >> $GITHUB_ENV
    #     echo "poetry_virtualenvs_path=$(poetry config --list | sed -n 's/.*virtualenvs.path = .* # //p' | sed -e 's/^\"//' -e 's/\"$//')" >> $GITHUB_ENV
    #
    # - name: Configure poetry
    #   shell: bash
    #   run: poetry config virtualenvs.in-project true

    # - name: Set up cache
    #   uses: actions/cache@v2
    #   id: cache
    #   with:
    #     path: |
    #       .venv
    #       ${{ env.poetry_cache_dir }}
    #       ${{ env.poetry_virtualenvs_path }}
    #     key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    # - name: Ensure cache is healthy
    #   if: steps.cache.outputs.cache-hit == 'true'
    #   shell: bash
    #   run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv

    # - name: Upgrade pip
    #   shell: bash
    #   run: poetry run python -m pip install pip -U

    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1 
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          PY_VERSION=${{ matrix.python-version }}
          ASGIREF_VERSION=${{ matrix.asgi-version }}
          DJANGO_VERSION=${{ matrix.django-version }}
          CHANNELS_VERSION=${{ matrix.channels-version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  run:
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    needs: build

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.9' ]
        django-version: [ '2.2' ]
        channels-version: [ '3.0.3' ]
        asgiref-version: [ '3.2.10' ]
        # python-version: [ '3.9' ]
        # django-version: [ '2.2', '3.1', '3.2', '4.0' ]
        # channels-version: [ '3.0.3' ]
        # asgiref-version: [ '3.2.10', '3.3.4', '3.4.1' ]

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}-python-${{ matrix.python-version }}-django-${{ matrix.django-version}}-channels-${{ matrix.channels-version }}-asgiref-${{ matrix.asgiref-version }}

    services:
      django-server:
        image: ${{ needs.build.outputs.REGISTRY }}/${{ needs.build.outputs.IMAGE_NAME }}:docker
        env:
          APPEND_STATICFILES_URLPATTERN: 1
          PORT: 8999
        ports:
          - 8999:8999

    steps:

      - uses: addnab/docker-run-action@v3
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN}}
          registry: ghcr.io
          image: ${{ needs.build.outputs.REGISTRY }}/${{ needs.build.outputs.IMAGE_NAME }}:docker
          options: --detach -v ${{ github.workspace }}:/work -e PORT=8998 -e APPEND_STATICFILES_URLPATTERN=1

      - name: ping 8898
        shell: bash
        run: |
          curl -c 3 localhost:8998
          STATUS=$(curl -I "localhost:8998" 2>&1 | awk '/HTTP\// {print $2}')
          echo $STATUS

      - name: ping 8999
        shell: bash
        run: |
          curl -c 3 localhost:8999
          STATUS=$(curl -I "localhost:8999" 2>&1 | awk '/HTTP\// {print $2}')
          echo $STATUS


      - name: django-server logs
        run: docker logs "${{ job.services.django-server.id }}"
        if: always()
